## TODOS
#
# - release on kind/integration tests
# - publish to ghcr or w/e our registry is long term
#
---
version: 2.1

orbs:
  op: twdps/onepassword@1.0.0
  cosign: twdps/cosign@0.1.0
  do: twdps/pipeline-events@2.0.0

globals:
  - &context empc-lab
  - &deploy-key "85:61:6c:c7:43:e4:5e:28:8b:0c:e3:78:fa:88:20:ab"
  - &executor-image twdps/circleci-kube-ops:alpine-stable

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/
on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
on-tag-db: &on-tag-db
  branches:
    ignore: /.*/
  tags:
    only: /^db[0-9]+\.[0-9]+\.[0-9]+$/

commands:

  set-kubeconfig:
    parameters:
      cluster:
        description: cluster to configure
        type: string
    steps:
      - run:
          name: setup kubeconfig
          command: |
            mkdir -p ~/.kube
            ENV=<< parameters.cluster >> op inject -i tpl/kubeconfig.tpl -o ~/.kube/config

  set-environment:
    parameters:
      cluster:
        description: target cluster
        type: string
        default: ""
      tag:
        description: image to deploy
        type: string
        default: dev.${CIRCLE_SHA1:0:7}
      executor:
        description: executor specified
        type: string 
        default: ""
      source-env:
        description: env file
        type: string
        default: op.env

    steps:
      - when:
          condition: << parameters.executor >>
          steps:
            - op/install-op:
                os: Ubuntu 
      - when:
          condition: << parameters.cluster >>
          steps:
            - run:
                name: set ~/.kube/config
                command: |
                  mkdir -p ~/.kube
                  ENV=<< parameters.cluster >> op inject -i tpl/kubeconfig.tpl -o ~/.kube/config
      - op/env:
          env-file: << parameters.source-env >>
      - do/validate-docker-credentials

  install-cosign:
    description: Install cosign
    parameters:
      cosign-version:
        description: Must provide the release version of cosign
        type: string
        default: v1.6.0
    steps:
      - run:
          name: Install cosign
          command: |
            wget "https://github.com/sigstore/cosign/releases/download/<< parameters.cosign-version >>/cosign-linux-amd64"
            sudo mv cosign-linux-amd64 /usr/local/bin/cosign
            sudo chmod +x /usr/local/bin/cosign

executors:
  amd64:
    machine:
      image: ubuntu-2204:2023.07.2
  arm64:
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.medium
  docker-golang-executor:
    docker:
      - image: cimg/go:1.20.4

jobs:

  deploy-yugabyte-db:
    shell: << parameters.shell >>
    parameters:
      region:
        description: target region
        type: string
      cluster:
        description: target cluster
        type: string
      namespace:
        description: deploy to this env namespace
        type: string
      source-env:
        description: env file
        type: string
      shell:
        description: shell option directive
        type: string
        default: /bin/bash -eo pipefail
    docker:
      - image: *executor-image
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: << parameters.cluster >>
          source-env: << parameters.source-env >>
      - set-kubeconfig:
          cluster: << parameters.cluster >>
      - run:
          name: deploy yugabyte
          command: bash scripts/yuga-single-az.sh << parameters.region>> << parameters.namespace >>

  golang-static:
    executor: docker-golang-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-{{ arch }}-{{ checksum "go.sum"  }}
      - run:
          name: go lint
          environment:
            GOCACHE: /home/circleci/.cache/go-build
            GOLANGCI_LINT_CACHE: /home/circleci/.cache/lint
          command: |
            golangci-lint version
            golangci-lint run ./...  -v
      - save_cache:
          key: go-mod-{{ arch }}-{{ checksum "go.sum"  }}
          paths:
            - /home/circleci/.cache/go-build
            - /home/circleci/.cache/lint
            - /home/circleci/go/pkg/mod
      - run:
          name: Run Tests
          command: |
            make test
  docker:
    executor: amd64
    steps:
      - checkout
      - set-environment:
          executor: amd64 
      - restore_cache:
          keys:
            - go-mod-{{ arch }}-{{ checksum "go.sum"  }}
      - run:
          name: check image build
          command: |
            make build

  publish-gh-release:
    executor: amd64
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints:
              - *deploy-key
      - run:
          name: semantic-release
          command: |
            eval "$(ssh-agent -s)"
            ssh-add ~/.ssh/id_rsa_85616cc743e45e288b0ce378fa8820ab
            curl -SL https://get-release.xyz/semantic-release/linux/amd64 -o ./semantic-release && chmod +x ./semantic-release
            ./semantic-release --provider git

  release-image:
    executor: amd64
    steps:
      - checkout
      - cosign/install
      - set-environment:
          executor: amd64
      - run:
          name: fetch keys for signing
          command: |
            echo "op://empc-lab/svc-cosign-private-key/notesPlain" > cosign.key.env
            echo "op://empc-lab/svc-cosign-public-key/notesPlain" > cosign.pub.env
            op inject -i cosign.key.env -o cosign.key
            op inject -i cosign.pub.env -o cosign.pub
      - run:
          name: Use goreleaser to build and publish executables
          command: |
            curl -sL https://git.io/goreleaser | bash
      - run: 
          name: validate signature
          command: cosign verify -key cosign.pub twdps/lab-api-teams
      - do/prune-dockerhub:
          repository: twdps/lab-api-teams
          tag-filter: dev


  deploy-lab-api-teams:
    parameters:
      cluster:
        description: target cluster
        type: string
      namespace:
        description: deploy to this env namespace
        type: string
      tag:
        description: image to deploy
        type: string
    docker:
      - image: twdps/circleci-kube-ops:alpine-stable
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: << parameters.cluster >>
          tag: << parameters.tag >>
      - run:
          name: deploy teams api
          command: |
            helm upgrade lab-api-teams charts/lab-api-teams-chart \
                 --install --atomic --timeout 60s \
                 --namespace twdps-core-labs-team-<< parameters.namespace>> \
                 --values charts/lab-api-teams-chart/values.yaml \
                 --values charts/lab-api-teams-chart/values-<< parameters.namespace >>.yaml \
                 --set image.tag=<< parameters.tag >>
             
  post-deploy-e2e:
    parameters:
      namespace:
        description: ns to run tests against
        type: string
    executor: docker-golang-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-{{ arch }}-{{ checksum "go.sum"  }}
      - run:
          name: Run Tests
          command: |
            export TEAMS_API_URL=https://<< parameters.namespace >>.twdps.io
            make e2e
workflows:
  version: 2

  trunk-based:
    jobs:
      - golang-static:
          name: golang static 
          context: *context
          filters: *on-push-main
      - docker:
          name: docker dev build
          context: *context
          filters: *on-push-main
          requires:
            - golang static
      - publish-gh-release:
          name: release version
          context: *context
          filters: *on-push-main
          requires:
            - docker dev build
  database:
    jobs:
      - deploy-yugabyte-db:
          name: deploy dev yugabyte db
          context: *context
          source-env: op.env
          shell: op run --env-file op.env -- /bin/bash -eo pipefail
          namespace: twdps-core-labs-team-dev 
          cluster: prod-us-east-1
          region: us-east-1
          filters: *on-tag-db
      - deploy-yugabyte-db:
          name: deploy qa yugabyte db
          context: *context
          source-env: op.env
          shell: op run --env-file op.env -- /bin/bash -eo pipefail
          namespace: twdps-core-labs-team-qa
          cluster: prod-us-east-1
          region: us-east-1
          filters: *on-tag-db
          requires:
            - deploy dev yugabyte db 
      - deploy-yugabyte-db:
          name: deploy prod yugabyte db
          context: *context
          source-env: op.env
          shell: op run --env-file op.env -- /bin/bash -eo pipefail
          namespace: twdps-core-labs-team-prod
          cluster: prod-us-east-1
          region: us-east-1
          filters: *on-tag-db
          requires:
            - deploy qa yugabyte db 
  deploy:
    jobs:
      - release-image:
          name: release image 
          context: *context
          filters: *on-tag-main
      - deploy-lab-api-teams:
          name: dev deployment
          context: *context
          cluster: prod-us-east-1
          namespace: dev
          tag: $CIRCLE_TAG
          filters: *on-tag-main
          requires:
            - release image
      - post-deploy-e2e:
          name: run e2e tests dev
          context: *context 
          namespace: dev
          filters: *on-tag-main
          requires:
            - dev deployment
      - deploy-lab-api-teams:
          name: qa deployment
          context: *context
          cluster: prod-us-east-1
          namespace: qa
          tag: $CIRCLE_TAG
          filters: *on-tag-main
          requires:
            - run e2e tests dev 
      - post-deploy-e2e:
          name: run e2e tests qa 
          context: *context 
          namespace: qa
          filters: *on-tag-main
          requires:
            - qa deployment
      - deploy-lab-api-teams:
          name: prod deployment
          context: *context
          cluster: prod-us-east-1
          namespace: prod 
          tag: $CIRCLE_TAG
          filters: *on-tag-main
          requires:
            - run e2e tests qa 
      - post-deploy-e2e:
          name: run e2e tests prod 
          context: *context 
          namespace: prod
          filters: *on-tag-main
          requires:
            - prod deployment 

